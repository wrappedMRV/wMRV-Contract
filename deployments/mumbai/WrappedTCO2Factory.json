{
  "address": "0xfA1B371D2d645eE93E5BA3d933d9782dBd17aEc6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_jobId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wrappedTCO2Address",
          "type": "address"
        }
      ],
      "name": "WrappedTCO2Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "path",
          "type": "string"
        }
      ],
      "name": "addRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tco2TokenAddress",
          "type": "address"
        }
      ],
      "name": "createWrappedTCO2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRequestDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "path",
              "type": "string"
            }
          ],
          "internalType": "struct IOracleUrlSource.RequestDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWrappedTCO2Contracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "link",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "path",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wrappedTCO2Contracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6548c40e5db48635506ab93a7d96b3c28d7c5c24c15520698e5270feef431407",
  "receipt": {
    "to": null,
    "from": "0x012CF55e33e161e3c76211caFE6D1527AA319c7A",
    "contractAddress": "0xfA1B371D2d645eE93E5BA3d933d9782dBd17aEc6",
    "transactionIndex": 2,
    "gasUsed": "4156481",
    "logsBloom": "0x
    "blockHash": "0x23cd23f8b2bc91f29606718a35e9313590f5230d496de8b99d0cd108efdaa0eb",
    "transactionHash": "0x6548c40e5db48635506ab93a7d96b3c28d7c5c24c15520698e5270feef431407",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 43065825,
        "transactionHash": "0x6548c40e5db48635506ab93a7d96b3c28d7c5c24c15520698e5270feef431407",
        "address": "0xfA1B371D2d645eE93E5BA3d933d9782dBd17aEc6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000012cf55e33e161e3c76211cafe6d1527aa319c7a"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x23cd23f8b2bc91f29606718a35e9313590f5230d496de8b99d0cd108efdaa0eb"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 43065825,
        "transactionHash": "0x6548c40e5db48635506ab93a7d96b3c28d7c5c24c15520698e5270feef431407",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000012cf55e33e161e3c76211cafe6d1527aa319c7a",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000274b902ecfdf5800000000000000000000000000000000000000000000000006c649e532fcd4320000000000000000000000000000000000000000000022c6560d5bc095b0bc29000000000000000000000000000000000000000000000000069efe55042cf4da0000000000000000000000000000000000000000000022c65634a750c4809b81",
        "logIndex": 12,
        "blockHash": "0x23cd23f8b2bc91f29606718a35e9313590f5230d496de8b99d0cd108efdaa0eb"
      }
    ],
    "blockNumber": 43065825,
    "cumulativeGasUsed": "5976674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40193c8518BB267228Fc409a613bDbD8eC5a97b3",
    "ca98366cc7314957b8c012c72f05aeeb",
    "100000000000000000",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB"
  ],
  "numDeployments": 1,
  "solcInputHash": "36a86c5c8da1d2ac6ce7a916e744591c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_jobId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedTCO2Address\",\"type\":\"address\"}],\"name\":\"WrappedTCO2Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"addRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tco2TokenAddress\",\"type\":\"address\"}],\"name\":\"createWrappedTCO2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequestDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"internalType\":\"struct IOracleUrlSource.RequestDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedTCO2Contracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wrappedTCO2Contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrappedTCO2Factory.sol\":\"WrappedTCO2Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(Request memory self, string memory key, string memory value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(Request memory self, string memory key, bytes memory value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(Request memory self, string memory key, int256 value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(Request memory self, string memory key, uint256 value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(Request memory self, string memory key, string[] memory values) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0xd948e1b24126d8c4acd5578d8f403c23c6fdf5f98f403eedc2587cf874cfe0d1\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10 ** 18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(\\n    bytes32 specId,\\n    bytes4 callbackFunctionSignature\\n  ) internal view returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(\\n    bytes32 requestId\\n  )\\n    internal\\n    recordChainlinkFulfillment(requestId) // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x3ede49735636eb1ac60706164b9c02f5aae31da54c8920a07ffc11efdbc45e79\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd8d9f0bfa3c4a0d4f4ab3450b623521029623b2a347ffcacc06d016eab9628d6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x3dc245e626e56be2131954e11792bf4b84a20c83110a63b028254aa8909b8fae\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IOracleUrlSource.sol\":{\"content\":\"pragma solidity 0.8.14;\\n\\ninterface IOracleUrlSource {\\n    struct RequestDetails {\\n        string url;\\n        string path;\\n    }\\n\\n    function getRequestDetails(\\n        uint256 id\\n    ) external view returns (RequestDetails memory);\\n}\\n\",\"keccak256\":\"0x0f7a5c742b2eb194c531d2e157b694cc79f806cb7eab29e37810d03d2f31c740\"},\"contracts/IToucanCarbonOffsets.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n    string registry;\\n}\\n/// @dev CarbonProject related data and attributes\\nstruct ProjectData {\\n    string projectId;\\n    string standard;\\n    string methodology;\\n    string region;\\n    string storageMethod;\\n    string method;\\n    string emissionType;\\n    string category;\\n    string uri;\\n    address beneficiary;\\n}\\nstruct CreateRetirementRequestParams {\\n    uint256[] tokenIds;\\n    uint256 amount;\\n    string retiringEntityString;\\n    address beneficiary;\\n    string beneficiaryString;\\n    string retirementMessage;\\n    string beneficiaryLocation;\\n    string consumptionCountryCode;\\n    uint256 consumptionPeriodStart;\\n    uint256 consumptionPeriodEnd;\\n}\\n\\ninterface IToucanCarbonOffsets {\\n    function retireFrom(\\n        address account,\\n        uint256 amount\\n    ) external returns (uint256 retirementEventId);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function getAttributes()\\n        external\\n        view\\n        returns (ProjectData memory, VintageData memory);\\n\\n    function standardRegistry() external view returns (string memory);\\n\\n    function retireAndMintCertificate(\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256 amount\\n    ) external;\\n\\n    function retireAndMintCertificateForEntity(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params\\n    ) external;\\n\\n    function projectVintageTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0d2bbb6c145cccf91b0d2b0c705485612be9f4f3bb072bb9893e83a143e48cc1\",\"license\":\"UNLICENSED\"},\"contracts/WrappedTCO2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\n\\nimport \\\"./IToucanCarbonOffsets.sol\\\";\\nimport \\\"./IOracleUrlSource.sol\\\";\\n\\ninterface IToucanCarbonOffsetsBase is IToucanCarbonOffsets, IERC20 {\\n    function getGlobalProjectVintageIdentifiers()\\n        external\\n        view\\n        returns (string memory, string memory);\\n}\\n\\n// mumbai contracts of toucan : https://app.toucan.earth/contracts#polygon-mumbai\\n// facets to get test assets : https://faucet.toucan.earth/\\n// EXample contract: https://github.com/smartcontractkit/chainlink-fullstack/blob/main/packages/hardhat/contracts/APIConsumer.sol\\ncontract WrappedTCO2 is ERC20, ChainlinkClient {\\n    using Chainlink for Chainlink.Request;\\n    bytes32 jobId;\\n    uint256 fee;\\n    address public oracle;\\n    IOracleUrlSource public oracleUrlSource;\\n    IToucanCarbonOffsetsBase public tco2Token;\\n    mapping(bytes32 => uint256) private requestIdToId;\\n\\n    mapping(uint256 => uint256) public projectRatings;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(\\n        address _tco2TokenAddress,\\n        address _oracle,\\n        bytes32 _jobId, //ca98366cc7314957b8c012c72f05aeeb for uint256 -> https://docs.chain.link/any-api/testnet-oracles\\n        uint256 _fee, //0.1\\n        address _link,\\n        address _dataSource\\n    ) ERC20(\\\"\\\", \\\"\\\") {\\n        tco2Token = IToucanCarbonOffsetsBase(_tco2TokenAddress);\\n\\n        string memory globalProjectId;\\n        string memory vintageName;\\n        (globalProjectId, vintageName) = tco2Token\\n            .getGlobalProjectVintageIdentifiers();\\n\\n        _name = string(\\n            abi.encodePacked(\\\"wTCO2-\\\", globalProjectId, \\\"-\\\", vintageName)\\n        );\\n\\n        _symbol = string(\\n            abi.encodePacked(\\\"wTCO2-\\\", globalProjectId, \\\"-\\\", vintageName)\\n        );\\n\\n        if (_link == address(0)) {\\n            setPublicChainlinkToken();\\n        } else {\\n            setChainlinkToken(_link);\\n        }\\n        oracle = _oracle;\\n        jobId = _jobId;\\n        fee = _fee;\\n        oracleUrlSource = IOracleUrlSource(_dataSource);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function wrap(uint256 amount) public {\\n        require(\\n            tco2Token.transferFrom(msg.sender, address(this), amount),\\n            \\\"Transfer failed\\\"\\n        );\\n        _mint(msg.sender, amount);\\n    }\\n\\n    function unwrap(uint256 amount) public {\\n        require(balanceOf(msg.sender) >= amount, \\\"Insufficient balance\\\");\\n        _burn(msg.sender, amount);\\n        require(tco2Token.transfer(msg.sender, amount), \\\"Transfer failed\\\");\\n    }\\n\\n    /**\\n     * Create a Chainlink request to retrieve API response, find the target\\n     * data.\\n     */\\n    function requestData(uint256 id) public returns (bytes32 requestId) {\\n        //Should the user pay?\\n        // require(\\n        //     IERC20(chainlinkTokenAddress()).transferFrom(\\n        //         msg.sender,\\n        //         address(this),\\n        //         fee\\n        //     ),\\n        //     \\\"Unable to transfer LINK\\\"\\n        // );\\n\\n        Chainlink.Request memory request = buildChainlinkRequest(\\n            jobId,\\n            address(this),\\n            this.fulfill.selector\\n        );\\n\\n        IOracleUrlSource.RequestDetails memory requestDetails = oracleUrlSource\\n            .getRequestDetails(id);\\n        request.add(\\\"get\\\", requestDetails.url);\\n        request.add(\\\"path\\\", requestDetails.path);\\n\\n        // Sends the request\\n        requestId = sendChainlinkRequestTo(oracle, request, fee);\\n        requestIdToId[requestId] = id;\\n\\n        return requestId;\\n    }\\n\\n    function fulfill(\\n        bytes32 _requestId,\\n        uint256 _data\\n    ) public recordChainlinkFulfillment(_requestId) {\\n        uint256 id = requestIdToId[_requestId];\\n        projectRatings[id] = _data;\\n\\n        delete requestIdToId[_requestId];\\n    }\\n\\n    function retireFrom(\\n        address account,\\n        uint256 amount\\n    ) external returns (uint256 retirementEventId) {\\n        return tco2Token.retireFrom(account, amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) external {\\n        tco2Token.burnFrom(account, amount);\\n    }\\n\\n    function getAttributes()\\n        external\\n        view\\n        returns (ProjectData memory, VintageData memory)\\n    {\\n        return tco2Token.getAttributes();\\n    }\\n\\n    function standardRegistry() external view returns (string memory) {\\n        return tco2Token.standardRegistry();\\n    }\\n\\n    function retireAndMintCertificate(\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256 amount\\n    ) external {\\n        _burn(msg.sender, amount);\\n        tco2Token.retireAndMintCertificate(\\n            retiringEntityString,\\n            beneficiary,\\n            beneficiaryString,\\n            retirementMessage,\\n            amount\\n        );\\n    }\\n\\n    function retireAndMintCertificateForEntity(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params\\n    ) external {\\n        _burn(msg.sender, params.amount);\\n        tco2Token.retireAndMintCertificateForEntity(retiringEntity, params);\\n    }\\n\\n    function projectVintageTokenId() external view returns (uint256) {\\n        return tco2Token.projectVintageTokenId();\\n    }\\n}\\n\",\"keccak256\":\"0x95438165f14f320a3cac92540d97b587384870aa3e001f28425b8ffb75406a4f\",\"license\":\"MIT\"},\"contracts/WrappedTCO2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./WrappedTCO2.sol\\\";\\nimport \\\"./IOracleUrlSource.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract WrappedTCO2Factory is Ownable, IOracleUrlSource {\\n    address[] public wrappedTCO2Contracts;\\n    mapping(address => address) underlyingToWrapped;\\n\\n    bytes32 jobId;\\n    uint256 fee;\\n    address public oracle;\\n    address public link;\\n\\n    // mapping(uint256 => RequestDetails) public requests;\\n    RequestDetails[] public requests;\\n\\n    event WrappedTCO2Created(address indexed wrappedTCO2Address);\\n    event RequestAdded(uint256 indexed id);\\n\\n    constructor(\\n        address _oracle,\\n        string memory _jobId, //ca98366cc7314957b8c012c72f05aeeb for uint256 -> https://docs.chain.link/any-api/testnet-oracles\\n        uint256 _fee, //0.1\\n        address _link\\n    ) {\\n        oracle = _oracle;\\n        jobId = stringToBytes32(_jobId);\\n        fee = _fee;\\n        link = _link;\\n    }\\n\\n    // Function to create a new WrappedTCO2\\n    function createWrappedTCO2(address _tco2TokenAddress) public {\\n        require(\\n            underlyingToWrapped[_tco2TokenAddress] == address(0),\\n            \\\"WrappedTCO2 already exists\\\"\\n        );\\n        WrappedTCO2 wrappedTCO2 = new WrappedTCO2(\\n            _tco2TokenAddress,\\n            oracle,\\n            jobId,\\n            fee,\\n            link,\\n            address(this)\\n        );\\n        wrappedTCO2Contracts.push(address(wrappedTCO2));\\n        underlyingToWrapped[_tco2TokenAddress] = address(wrappedTCO2);\\n        emit WrappedTCO2Created(address(wrappedTCO2));\\n    }\\n\\n    function getWrappedTCO2Contracts() public view returns (address[] memory) {\\n        return wrappedTCO2Contracts;\\n    }\\n\\n    function addRequest(\\n        string memory url,\\n        string memory path\\n    ) public onlyOwner {\\n        requests.push(RequestDetails(url, path));\\n        emit RequestAdded(requests.length - 1);\\n    }\\n\\n    // Function to retrieve request details\\n    function getRequestDetails(\\n        uint256 id\\n    ) public view returns (RequestDetails memory) {\\n        require(id < requests.length, \\\"Invalid request id\\\");\\n        return requests[id];\\n    }\\n\\n    function stringToBytes32(\\n        string memory source\\n    ) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d2dbf5a99ae61d3e06baa33b89cfae54952d38f8cbd880bf233a7547a3b8dd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004ab738038062004ab7833981016040819052620000349162000139565b6200003f3362000096565b600580546001600160a01b0319166001600160a01b0386161790556200006583620000e6565b600355600491909155600680546001600160a01b0319166001600160a01b0390921691909117905550620002489050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805160009082908203620000fd5750600092915050565b50506020015190565b80516001600160a01b03811681146200011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200015057600080fd5b6200015b8562000106565b602086810151919550906001600160401b03808211156200017b57600080fd5b818801915088601f8301126200019057600080fd5b815181811115620001a557620001a562000123565b604051601f8201601f19908116603f01168101908382118183101715620001d057620001d062000123565b816040528281528b86848701011115620001e957600080fd5b600093505b828410156200020d5784840186015181850187015292850192620001ee565b828411156200021f5760008684830101525b809850505050505050604085015191506200023d6060860162000106565b905092959194509250565b61485f80620002586000396000f3fe60806040523480156200001157600080fd5b5060043610620000e55760003560e01c80639559c07f116200008b578063e73ebd811162000062578063e73ebd811462000213578063f2fde38b146200022c578063f34d4c63146200024357600080fd5b80639559c07f14620001bf578063b9da4af814620001d6578063cfb5192814620001ed57600080fd5b806381d12c5811620000c057806381d12c58146200016257806383d00d2914620001895780638da5cb5b14620001a057600080fd5b80631c4695f414620000ea578063715018a614620001355780637dc0d1d01462000141575b600080fd5b6006546200010b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6200013f62000269565b005b6005546200010b9073ffffffffffffffffffffffffffffffffffffffff1681565b620001796200017336600462000bac565b62000281565b6040516200012c92919062000c34565b6200010b6200019a36600462000bac565b620003d6565b60005473ffffffffffffffffffffffffffffffffffffffff166200010b565b6200013f620001d036600462000c66565b6200040e565b6200013f620001e736600462000d87565b620005ff565b62000204620001fe36600462000df2565b620006c7565b6040519081526020016200012c565b6200021d620006e7565b6040516200012c919062000e33565b6200013f6200023d36600462000c66565b62000758565b6200025a6200025436600462000bac565b62000815565b6040516200012c919062000e8f565b6200027362000a00565b6200027f600062000a83565b565b600781815481106200029257600080fd5b9060005260206000209060020201600091509050806000018054620002b79062000eea565b80601f0160208091040260200160405190810160405280929190818152602001828054620002e59062000eea565b8015620003365780601f106200030a5761010080835404028352916020019162000336565b820191906000526020600020905b8154815290600101906020018083116200031857829003601f168201915b5050505050908060010180546200034d9062000eea565b80601f01602080910402602001604051908101604052809291908181526020018280546200037b9062000eea565b8015620003cc5780601f10620003a057610100808354040283529160200191620003cc565b820191906000526020600020905b815481529060010190602001808311620003ae57829003601f168201915b5050505050905082565b60018181548110620003e757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600260205260409020541615620004a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5772617070656454434f3220616c72656164792065786973747300000000000060448201526064015b60405180910390fd5b600554600354600454600654604051600094869473ffffffffffffffffffffffffffffffffffffffff91821694909390929116903090620004e49062000af8565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c001604051809103906000f08015801562000545573d6000803e3d6000fd5b50600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805473ffffffffffffffffffffffffffffffffffffffff8084167fffffffffffffffffffffffff00000000000000000000000000000000000000009283168117909355851660009081526002602052604080822080549093168417909255905192935090917f68dbab7bf7ba33cc24097f8864673e416548ae0c59e0d3a20d51eb3b6a8206fb9190a25050565b6200060962000a00565b604080518082019091528281526020808201839052600780546001810182556000919091528251805160029092027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801926200066b9284929091019062000b06565b50602082810151805162000686926001850192019062000b06565b50506007546200069a915060019062000f3f565b6040517f1241757208f08d63f291d85cafba51f9c01fc80b77f21fb69b4b7ce9908b9a0e90600090a25050565b805160009082908203620006de5750600092915050565b50506020015190565b606060018054806020026020016040519081016040528092919081815260200182805480156200074e57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162000722575b5050505050905090565b6200076262000a00565b73ffffffffffffffffffffffffffffffffffffffff811662000807576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200049a565b620008128162000a83565b50565b6040805180820190915260608082526020820152600754821062000896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642072657175657374206964000000000000000000000000000060448201526064016200049a565b60078281548110620008ac57620008ac62000f7e565b9060005260206000209060020201604051806040016040529081600082018054620008d79062000eea565b80601f0160208091040260200160405190810160405280929190818152602001828054620009059062000eea565b8015620009565780601f106200092a5761010080835404028352916020019162000956565b820191906000526020600020905b8154815290600101906020018083116200093857829003601f168201915b50505050508152602001600182018054620009719062000eea565b80601f01602080910402602001604051908101604052809291908181526020018280546200099f9062000eea565b8015620009f05780601f10620009c457610100808354040283529160200191620009f0565b820191906000526020600020905b815481529060010190602001808311620009d257829003601f168201915b5050505050815250509050919050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200049a565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6138a58062000fae83390190565b82805462000b149062000eea565b90600052602060002090601f01602090048101928262000b38576000855562000b83565b82601f1062000b5357805160ff191683800117855562000b83565b8280016001018555821562000b83579182015b8281111562000b8357825182559160200191906001019062000b66565b5062000b9192915062000b95565b5090565b5b8082111562000b91576000815560010162000b96565b60006020828403121562000bbf57600080fd5b5035919050565b6000815180845260005b8181101562000bee5760208185018101518683018201520162000bd0565b8181111562000c01576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600062000c49604083018562000bc6565b828103602084015262000c5d818562000bc6565b95945050505050565b60006020828403121562000c7957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811462000c9e57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011262000ce657600080fd5b813567ffffffffffffffff8082111562000d045762000d0462000ca5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562000d4d5762000d4d62000ca5565b8160405283815286602085880101111562000d6757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121562000d9b57600080fd5b823567ffffffffffffffff8082111562000db457600080fd5b62000dc28683870162000cd4565b9350602085013591508082111562000dd957600080fd5b5062000de88582860162000cd4565b9150509250929050565b60006020828403121562000e0557600080fd5b813567ffffffffffffffff81111562000e1d57600080fd5b62000e2b8482850162000cd4565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101562000e8357835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000e4f565b50909695505050505050565b60208152600082516040602084015262000ead606084018262000bc6565b905060208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084830301604085015262000c5d828262000bc6565b600181811c9082168062000eff57607f821691505b60208210810362000f39577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008282101562000f79577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe608060405260016009553480156200001657600080fd5b50604051620038a5380380620038a5833981016040819052620000399162000369565b604080516020808201808452600080845284519283019094529281528151919290916200006991600391620002a6565b5080516200007f906004906020840190620002a6565b5050600f80546001600160a01b0319166001600160a01b038916908117909155604080516364c5a40360e01b81529051606093508392916364c5a4039160048083019260009291908290030181865afa158015620000e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200010b9190810190620004b2565b60405191935091506200012590839083906020016200051c565b604051602081830303815290604052601290805190602001906200014b929190620002a6565b508181604051602001620001619291906200051c565b6040516020818303038152906040526013908051906020019062000187929190620002a6565b506001600160a01b038416620001a757620001a162000205565b620001c3565b600780546001600160a01b0319166001600160a01b0386161790555b5050600d80546001600160a01b039687166001600160a01b031991821617909155600b94909455600c9290925550600e805491909316911617905550620005cf565b620002a473c89bd4e1632d3a43cb03aaad5262cbe4038bc5716001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200025c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028291906200056e565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b565b828054620002b49062000593565b90600052602060002090601f016020900481019282620002d8576000855562000323565b82601f10620002f357805160ff191683800117855562000323565b8280016001018555821562000323579182015b828111156200032357825182559160200191906001019062000306565b506200033192915062000335565b5090565b5b8082111562000331576000815560010162000336565b80516001600160a01b03811681146200036457600080fd5b919050565b60008060008060008060c087890312156200038357600080fd5b6200038e876200034c565b95506200039e602088016200034c565b94506040870151935060608701519250620003bc608088016200034c565b9150620003cc60a088016200034c565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200040b578181015183820152602001620003f1565b838111156200041b576000848401525b50505050565b600082601f8301126200043357600080fd5b81516001600160401b0380821115620004505762000450620003d8565b604051601f8301601f19908116603f011681019082821181831017156200047b576200047b620003d8565b816040528381528660208588010111156200049557600080fd5b620004a8846020830160208901620003ee565b9695505050505050565b60008060408385031215620004c657600080fd5b82516001600160401b0380821115620004de57600080fd5b620004ec8683870162000421565b935060208501519150808211156200050357600080fd5b50620005128582860162000421565b9150509250929050565b657754434f322d60d01b8152600083516200053f816006850160208801620003ee565b602d60f81b600691840191820152835162000562816007840160208801620003ee565b01600701949350505050565b6000602082840312156200058157600080fd5b6200058c826200034c565b9392505050565b600181811c90821680620005a857607f821691505b602082108103620005c957634e487b7160e01b600052602260045260246000fd5b50919050565b6132c680620005df6000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80636b24ffd6116100ee578063a457c2d711610097578063de0e9a3e11610071578063de0e9a3e146103fc578063e819426c1461040f578063ea598cb014610417578063f2e148381461042a57600080fd5b8063a457c2d714610390578063a9059cbb146103a3578063dd62ed3e146103b657600080fd5b80637dc0d1d0116100c85780637dc0d1d01461034857806391da1ed21461036857806395d89b411461038857600080fd5b80636b24ffd6146102ec57806370a08231146102ff57806379cc67901461033557600080fd5b80632ef292901161015b5780633c31175e116101355780633c31175e146102795780634357855e1461028157806345a54ca6146102945780636746e7be146102d957600080fd5b80632ef2929014610242578063313ce56714610257578063395093511461026657600080fd5b806318160ddd1161018c57806318160ddd1461020a57806323b872dd1461021c5780632adb9e3c1461022f57600080fd5b806306fdde03146101b3578063095ea7b3146101d1578063152583de146101f4575b600080fd5b6101bb61044a565b6040516101c891906121a7565b60405180910390f35b6101e46101df3660046121ec565b6104dc565b60405190151581526020016101c8565b6101fc6104f6565b6040516101c892919061233d565b6002545b6040519081526020016101c8565b6101e461022a3660046124a7565b6106a3565b61020e61023d3660046124e8565b6106c7565b61025561025036600461254a565b61086e565b005b604051601281526020016101c8565b6101e46102743660046121ec565b610918565b6101bb610964565b61025561028f366004612600565b610a1f565b600f546102b49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c8565b6102556102e7366004612622565b610b5e565b61020e6102fa3660046121ec565b610bfa565b61020e61030d36600461267a565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6102556103433660046121ec565b610c9f565b600d546102b49073ffffffffffffffffffffffffffffffffffffffff1681565b600e546102b49073ffffffffffffffffffffffffffffffffffffffff1681565b6101bb610cfe565b6101e461039e3660046121ec565b610d0d565b6101e46103b13660046121ec565b610dde565b61020e6103c4366004612697565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b61025561040a3660046124e8565b610dec565b61020e610f73565b6102556104253660046124e8565b611007565b61020e6104383660046124e8565b60116020526000908152604090205481565b606060128054610459906126c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610485906126c5565b80156104d25780601f106104a7576101008083540402835291602001916104d2565b820191906000526020600020905b8154815290600101906020018083116104b557829003601f168201915b5050505050905090565b6000336104ea818585611118565b60019150505b92915050565b610562604051806101400160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6105e860405180610180016040528060608152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815260200160008152602001600067ffffffffffffffff16815260200160001515815260200160001515815260200160608152602001606081526020016060815260200160608152602001606081525090565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663152583de6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610655573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261069b91908101906129c9565b915091509091565b6000336106b18582856112cb565b6106bc8585856113a2565b506001949350505050565b6000806106de600b5430634357855e60e01b611611565b600e546040517ff34d4c630000000000000000000000000000000000000000000000000000000081526004810186905291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063f34d4c6390602401600060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107999190810190612b91565b60408051808201909152600381527f6765740000000000000000000000000000000000000000000000000000000000602082015281519192506107de918491906116a2565b61082c6040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152508260200151846116a29092919063ffffffff16565b600d54600c546108549173ffffffffffffffffffffffffffffffffffffffff169084906116c5565b600081815260106020526040902094909455509192915050565b61087833826117bc565b600f546040517f2ef2929000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632ef29290906108dc908b908b908b908b908b908b908b908b90600401612c81565b600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b505050505050505050505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906104ea908290869061095f908790612d1e565b611118565b600f54604080517f3c31175e000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff1691633c31175e9160048083019260009291908290030181865afa1580156109d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a1a9190810190612d36565b905090565b6000828152600a6020526040902054829073ffffffffffffffffffffffffffffffffffffffff163314610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f662074686560448201527f207265717565737400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000818152600a602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a250600082815260106020818152604080842080548552601183529084209490945593825290925255565b610b6c3382602001356117bc565b600f546040517f6746e7be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690636746e7be90610bc49085908590600401612e85565b600060405180830381600087803b158015610bde57600080fd5b505af1158015610bf2573d6000803e3d6000fd5b505050505050565b600f546040517f6b24ffd600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490526000921690636b24ffd6906044016020604051808303816000875af1158015610c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c98919061300c565b9392505050565b600f546040517f79cc679000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906379cc679090604401610bc4565b606060138054610459906126c5565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610dd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610ad0565b6106bc8286868403611118565b6000336104ea8185856113a2565b33600090815260208190526040902054811115610e65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610ad0565b610e6f33826117bc565b600f546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a9190613025565b610f70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610ad0565b50565b600f54604080517fe819426c000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163e819426c9160048083019260209291908290030181865afa158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a919061300c565b600f546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190613025565b61110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610ad0565b610f703382611980565b73ffffffffffffffffffffffffffffffffffffffff83166111ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff821661125d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461139c578181101561138f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610ad0565b61139c8484848403611118565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316611445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff82166114e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101561159e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361139c565b61164f6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61168d6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61169981868686611a73565b95945050505050565b60808301516116b19083611b14565b60808301516116c09082611b14565b505050565b6009546000906116d6816001612d1e565b600955835160408086015160808701515191516000937f4042994600000000000000000000000000000000000000000000000000000000936117279386938493923092918a91600191602401613040565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506117b286838684611b2b565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff821661185f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff82166119fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ad0565b8060026000828254611a0f9190612d1e565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b611ab16040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b611ac18560800151610100611d39565b505082845273ffffffffffffffffffffffffffffffffffffffff821660208501527fffffffff0000000000000000000000000000000000000000000000000000000081166040850152835b949350505050565b611b218260038351611d9e565b6116c08282611ead565b6040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003060601b16602082015260348101849052600090605401604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020918201206000818152600a90925291812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a26007546040517f4000aea000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690634000aea090611c6a908890879087906004016130c9565b6020604051808303816000875af1158015611c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cad9190613025565b611b0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c6500000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b604080518082019091526060815260006020820152611d596020836130fe565b15611d8157611d696020836130fe565b611d74906020613139565b611d7e9083612d1e565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611611dc35761139c8360e0600585901b168317611ed4565b60ff8167ffffffffffffffff1611611e0157611dea836018611fe0600586901b1617611ed4565b5061139c8367ffffffffffffffff83166001611ef9565b61ffff8167ffffffffffffffff1611611e4057611e29836019611fe0600586901b1617611ed4565b5061139c8367ffffffffffffffff83166002611ef9565b63ffffffff8167ffffffffffffffff1611611e8157611e6a83601a611fe0600586901b1617611ed4565b5061139c8367ffffffffffffffff83166004611ef9565b611e9683601b611fe0600586901b1617611ed4565b5061139c8367ffffffffffffffff83166008611ef9565b604080518082019091526060815260006020820152610c9883846000015151848551611f1f565b604080518082019091526060815260006020820152610c988384600001515184612027565b604080518082019091526060815260006020820152611b0c848560000151518585612082565b6040805180820190915260608152600060208201528251821115611f4257600080fd5b6020850151611f518386612d1e565b1115611f8457611f8485611f7487602001518786611f6f9190612d1e565b612103565b611f7f906002613150565b61211a565b600080865180518760208301019350808887011115611fa35787860182525b505050602084015b60208410611fe35780518252611fc2602083612d1e565b9150611fcf602082612d1e565b9050611fdc602085613139565b9350611fab565b5181517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60208690036101000a019081169019919091161790525083949350505050565b6040805180820190915260608152600060208201528360200151831061205c5761205c8485602001516002611f7f9190613150565b8351805160208583010184815350808503612078576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516120a68584612d1e565b11156120ba576120ba85611f748685612d1e565b600060016120ca846101006132ad565b6120d49190613139565b90508551838682010185831982511617815250805184870111156120f85783860181525b509495945050505050565b6000818311156121145750816104f0565b50919050565b81516121268383611d39565b5061139c8382611ead565b60005b8381101561214c578181015183820152602001612134565b8381111561139c5750506000910152565b60008151808452612175816020860160208601612131565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610c98602083018461215d565b73ffffffffffffffffffffffffffffffffffffffff81168114610f7057600080fd5b80356121e7816121ba565b919050565b600080604083850312156121ff57600080fd5b823561220a816121ba565b946020939093013593505050565b6000610180825181855261222e8286018261215d565b915050602083015161224c602086018267ffffffffffffffff169052565b506040830151612268604086018267ffffffffffffffff169052565b5060608301516060850152608083015161228e608086018267ffffffffffffffff169052565b5060a08301516122a260a086018215159052565b5060c08301516122b660c086018215159052565b5060e083015184820360e08601526122ce828261215d565b91505061010080840151858303828701526122e9838261215d565b925050506101208084015185830382870152612305838261215d565b925050506101408084015185830382870152612321838261215d565b9250505061016080840151858303828701526117b2838261215d565b604081526000835161014080604085015261235c61018085018361215d565b915060208601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080868503016060870152612398848361215d565b935060408801519150808685030160808701526123b5848361215d565b935060608801519150808685030160a08701526123d2848361215d565b935060808801519150808685030160c08701526123ef848361215d565b935060a08801519150808685030160e087015261240c848361215d565b935060c0880151915061010081878603018188015261242b858461215d565b945060e0890151925061012082888703018189015261244a868561215d565b9550818a01519350828887030185890152612465868561215d565b9550808a015194505050505061249461016085018273ffffffffffffffffffffffffffffffffffffffff169052565b5082810360208401526116998185612218565b6000806000606084860312156124bc57600080fd5b83356124c7816121ba565b925060208401356124d7816121ba565b929592945050506040919091013590565b6000602082840312156124fa57600080fd5b5035919050565b60008083601f84011261251357600080fd5b50813567ffffffffffffffff81111561252b57600080fd5b60208301915083602082850101111561254357600080fd5b9250929050565b60008060008060008060008060a0898b03121561256657600080fd5b883567ffffffffffffffff8082111561257e57600080fd5b61258a8c838d01612501565b909a50985060208b0135915061259f826121ba565b90965060408a013590808211156125b557600080fd5b6125c18c838d01612501565b909750955060608b01359150808211156125da57600080fd5b506125e78b828c01612501565b999c989b50969995989497949560800135949350505050565b6000806040838503121561261357600080fd5b50508035926020909101359150565b6000806040838503121561263557600080fd5b8235612640816121ba565b9150602083013567ffffffffffffffff81111561265c57600080fd5b8301610140818603121561266f57600080fd5b809150509250929050565b60006020828403121561268c57600080fd5b8135610c98816121ba565b600080604083850312156126aa57600080fd5b82356126b5816121ba565b9150602083013561266f816121ba565b600181811c908216806126d957607f821691505b602082108103612114577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561276557612765612712565b60405290565b604051610140810167ffffffffffffffff8111828210171561276557612765612712565b600082601f8301126127a057600080fd5b815167ffffffffffffffff808211156127bb576127bb612712565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561280157612801612712565b8160405283815286602085880101111561281a57600080fd5b6117b2846020830160208901612131565b80516121e7816121ba565b805167ffffffffffffffff811681146121e757600080fd5b805180151581146121e757600080fd5b6000610180828403121561287157600080fd5b612879612741565b9050815167ffffffffffffffff8082111561289357600080fd5b61289f8583860161278f565b83526128ad60208501612836565b60208401526128be60408501612836565b6040840152606084015160608401526128d960808501612836565b60808401526128ea60a0850161284e565b60a08401526128fb60c0850161284e565b60c084015260e084015191508082111561291457600080fd5b6129208583860161278f565b60e08401526101009150818401518181111561293b57600080fd5b6129478682870161278f565b83850152506101209150818401518181111561296257600080fd5b61296e8682870161278f565b83850152506101409150818401518181111561298957600080fd5b6129958682870161278f565b8385015250610160915081840151818111156129b057600080fd5b6129bc8682870161278f565b8385015250505092915050565b600080604083850312156129dc57600080fd5b825167ffffffffffffffff808211156129f457600080fd5b908401906101408287031215612a0957600080fd5b612a1161276b565b825182811115612a2057600080fd5b612a2c8882860161278f565b825250602083015182811115612a4157600080fd5b612a4d8882860161278f565b602083015250604083015182811115612a6557600080fd5b612a718882860161278f565b604083015250606083015182811115612a8957600080fd5b612a958882860161278f565b606083015250608083015182811115612aad57600080fd5b612ab98882860161278f565b60808301525060a083015182811115612ad157600080fd5b612add8882860161278f565b60a08301525060c083015182811115612af557600080fd5b612b018882860161278f565b60c08301525060e083015182811115612b1957600080fd5b612b258882860161278f565b60e0830152506101008084015183811115612b3f57600080fd5b612b4b8982870161278f565b828401525050610120612b5f81850161282b565b908201526020860151909450915080821115612b7a57600080fd5b50612b878582860161285e565b9150509250929050565b600060208284031215612ba357600080fd5b815167ffffffffffffffff80821115612bbb57600080fd5b9083019060408286031215612bcf57600080fd5b604051604081018181108382111715612bea57612bea612712565b604052825182811115612bfc57600080fd5b612c088782860161278f565b825250602083015182811115612c1d57600080fd5b612c298782860161278f565b60208301525095945050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60a081526000612c9560a083018a8c612c38565b73ffffffffffffffffffffffffffffffffffffffff891660208401528281036040840152612cc481888a612c38565b90508281036060840152612cd9818688612c38565b9150508260808301529998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612d3157612d31612cef565b500190565b600060208284031215612d4857600080fd5b815167ffffffffffffffff811115612d5f57600080fd5b611b0c8482850161278f565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612da057600080fd5b830160208101925035905067ffffffffffffffff811115612dc057600080fd5b8060051b360382131561254357600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612e0457600080fd5b8260051b8083602087013760009401602001938452509192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e5657600080fd5b830160208101925035905067ffffffffffffffff811115612e7657600080fd5b80360382131561254357600080fd5b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000612eb18384612d6b565b610140806040860152612ec961018086018385612dd2565b925060208601356060860152612ee26040870187612e21565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080878603016080880152612f1a858584612c38565b9450612f28606089016121dc565b73ffffffffffffffffffffffffffffffffffffffff811660a08901529350612f536080890189612e21565b94509150808786030160c0880152612f6c858584612c38565b9450612f7b60a0890189612e21565b94509150808786030160e0880152612f94858584612c38565b9450612fa360c0890189612e21565b94509150610100818887030181890152612fbe868685612c38565b9550612fcd60e08a018a612e21565b955092506101208289880301818a0152612fe8878786612c38565b918a0135948901949094529290970135610160909601959095529695505050505050565b60006020828403121561301e57600080fd5b5051919050565b60006020828403121561303757600080fd5b610c988261284e565b600061010073ffffffffffffffffffffffffffffffffffffffff808c1684528a60208501528960408501528089166060850152507fffffffff00000000000000000000000000000000000000000000000000000000871660808401528560a08401528460c08401528060e08401526130ba8184018561215d565b9b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000611699606083018461215d565b600082613134577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b60008282101561314b5761314b612cef565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561318857613188612cef565b500290565b600181815b808511156131e657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156131cc576131cc612cef565b808516156131d957918102915b93841c9390800290613192565b509250929050565b6000826131fd575060016104f0565b8161320a575060006104f0565b8160018114613220576002811461322a57613246565b60019150506104f0565b60ff84111561323b5761323b612cef565b50506001821b6104f0565b5060208310610133831016604e8410600b8410161715613269575081810a6104f0565b613273838361318d565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156132a5576132a5612cef565b029392505050565b6000610c9883836131ee56fea164736f6c634300080e000aa164736f6c634300080e000a",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e55760003560e01c80639559c07f116200008b578063e73ebd811162000062578063e73ebd811462000213578063f2fde38b146200022c578063f34d4c63146200024357600080fd5b80639559c07f14620001bf578063b9da4af814620001d6578063cfb5192814620001ed57600080fd5b806381d12c5811620000c057806381d12c58146200016257806383d00d2914620001895780638da5cb5b14620001a057600080fd5b80631c4695f414620000ea578063715018a614620001355780637dc0d1d01462000141575b600080fd5b6006546200010b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6200013f62000269565b005b6005546200010b9073ffffffffffffffffffffffffffffffffffffffff1681565b620001796200017336600462000bac565b62000281565b6040516200012c92919062000c34565b6200010b6200019a36600462000bac565b620003d6565b60005473ffffffffffffffffffffffffffffffffffffffff166200010b565b6200013f620001d036600462000c66565b6200040e565b6200013f620001e736600462000d87565b620005ff565b62000204620001fe36600462000df2565b620006c7565b6040519081526020016200012c565b6200021d620006e7565b6040516200012c919062000e33565b6200013f6200023d36600462000c66565b62000758565b6200025a6200025436600462000bac565b62000815565b6040516200012c919062000e8f565b6200027362000a00565b6200027f600062000a83565b565b600781815481106200029257600080fd5b9060005260206000209060020201600091509050806000018054620002b79062000eea565b80601f0160208091040260200160405190810160405280929190818152602001828054620002e59062000eea565b8015620003365780601f106200030a5761010080835404028352916020019162000336565b820191906000526020600020905b8154815290600101906020018083116200031857829003601f168201915b5050505050908060010180546200034d9062000eea565b80601f01602080910402602001604051908101604052809291908181526020018280546200037b9062000eea565b8015620003cc5780601f10620003a057610100808354040283529160200191620003cc565b820191906000526020600020905b815481529060010190602001808311620003ae57829003601f168201915b5050505050905082565b60018181548110620003e757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600260205260409020541615620004a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5772617070656454434f3220616c72656164792065786973747300000000000060448201526064015b60405180910390fd5b600554600354600454600654604051600094869473ffffffffffffffffffffffffffffffffffffffff91821694909390929116903090620004e49062000af8565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c001604051809103906000f08015801562000545573d6000803e3d6000fd5b50600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805473ffffffffffffffffffffffffffffffffffffffff8084167fffffffffffffffffffffffff00000000000000000000000000000000000000009283168117909355851660009081526002602052604080822080549093168417909255905192935090917f68dbab7bf7ba33cc24097f8864673e416548ae0c59e0d3a20d51eb3b6a8206fb9190a25050565b6200060962000a00565b604080518082019091528281526020808201839052600780546001810182556000919091528251805160029092027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801926200066b9284929091019062000b06565b50602082810151805162000686926001850192019062000b06565b50506007546200069a915060019062000f3f565b6040517f1241757208f08d63f291d85cafba51f9c01fc80b77f21fb69b4b7ce9908b9a0e90600090a25050565b805160009082908203620006de5750600092915050565b50506020015190565b606060018054806020026020016040519081016040528092919081815260200182805480156200074e57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162000722575b5050505050905090565b6200076262000a00565b73ffffffffffffffffffffffffffffffffffffffff811662000807576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200049a565b620008128162000a83565b50565b6040805180820190915260608082526020820152600754821062000896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642072657175657374206964000000000000000000000000000060448201526064016200049a565b60078281548110620008ac57620008ac62000f7e565b9060005260206000209060020201604051806040016040529081600082018054620008d79062000eea565b80601f0160208091040260200160405190810160405280929190818152602001828054620009059062000eea565b8015620009565780601f106200092a5761010080835404028352916020019162000956565b820191906000526020600020905b8154815290600101906020018083116200093857829003601f168201915b50505050508152602001600182018054620009719062000eea565b80601f01602080910402602001604051908101604052809291908181526020018280546200099f9062000eea565b8015620009f05780601f10620009c457610100808354040283529160200191620009f0565b820191906000526020600020905b815481529060010190602001808311620009d257829003601f168201915b5050505050815250509050919050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200049a565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6138a58062000fae83390190565b82805462000b149062000eea565b90600052602060002090601f01602090048101928262000b38576000855562000b83565b82601f1062000b5357805160ff191683800117855562000b83565b8280016001018555821562000b83579182015b8281111562000b8357825182559160200191906001019062000b66565b5062000b9192915062000b95565b5090565b5b8082111562000b91576000815560010162000b96565b60006020828403121562000bbf57600080fd5b5035919050565b6000815180845260005b8181101562000bee5760208185018101518683018201520162000bd0565b8181111562000c01576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600062000c49604083018562000bc6565b828103602084015262000c5d818562000bc6565b95945050505050565b60006020828403121562000c7957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811462000c9e57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011262000ce657600080fd5b813567ffffffffffffffff8082111562000d045762000d0462000ca5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562000d4d5762000d4d62000ca5565b8160405283815286602085880101111562000d6757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121562000d9b57600080fd5b823567ffffffffffffffff8082111562000db457600080fd5b62000dc28683870162000cd4565b9350602085013591508082111562000dd957600080fd5b5062000de88582860162000cd4565b9150509250929050565b60006020828403121562000e0557600080fd5b813567ffffffffffffffff81111562000e1d57600080fd5b62000e2b8482850162000cd4565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101562000e8357835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000e4f565b50909695505050505050565b60208152600082516040602084015262000ead606084018262000bc6565b905060208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084830301604085015262000c5d828262000bc6565b600181811c9082168062000eff57607f821691505b60208210810362000f39577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008282101562000f79577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe608060405260016009553480156200001657600080fd5b50604051620038a5380380620038a5833981016040819052620000399162000369565b604080516020808201808452600080845284519283019094529281528151919290916200006991600391620002a6565b5080516200007f906004906020840190620002a6565b5050600f80546001600160a01b0319166001600160a01b038916908117909155604080516364c5a40360e01b81529051606093508392916364c5a4039160048083019260009291908290030181865afa158015620000e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200010b9190810190620004b2565b60405191935091506200012590839083906020016200051c565b604051602081830303815290604052601290805190602001906200014b929190620002a6565b508181604051602001620001619291906200051c565b6040516020818303038152906040526013908051906020019062000187929190620002a6565b506001600160a01b038416620001a757620001a162000205565b620001c3565b600780546001600160a01b0319166001600160a01b0386161790555b5050600d80546001600160a01b039687166001600160a01b031991821617909155600b94909455600c9290925550600e805491909316911617905550620005cf565b620002a473c89bd4e1632d3a43cb03aaad5262cbe4038bc5716001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200025c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028291906200056e565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b565b828054620002b49062000593565b90600052602060002090601f016020900481019282620002d8576000855562000323565b82601f10620002f357805160ff191683800117855562000323565b8280016001018555821562000323579182015b828111156200032357825182559160200191906001019062000306565b506200033192915062000335565b5090565b5b8082111562000331576000815560010162000336565b80516001600160a01b03811681146200036457600080fd5b919050565b60008060008060008060c087890312156200038357600080fd5b6200038e876200034c565b95506200039e602088016200034c565b94506040870151935060608701519250620003bc608088016200034c565b9150620003cc60a088016200034c565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200040b578181015183820152602001620003f1565b838111156200041b576000848401525b50505050565b600082601f8301126200043357600080fd5b81516001600160401b0380821115620004505762000450620003d8565b604051601f8301601f19908116603f011681019082821181831017156200047b576200047b620003d8565b816040528381528660208588010111156200049557600080fd5b620004a8846020830160208901620003ee565b9695505050505050565b60008060408385031215620004c657600080fd5b82516001600160401b0380821115620004de57600080fd5b620004ec8683870162000421565b935060208501519150808211156200050357600080fd5b50620005128582860162000421565b9150509250929050565b657754434f322d60d01b8152600083516200053f816006850160208801620003ee565b602d60f81b600691840191820152835162000562816007840160208801620003ee565b01600701949350505050565b6000602082840312156200058157600080fd5b6200058c826200034c565b9392505050565b600181811c90821680620005a857607f821691505b602082108103620005c957634e487b7160e01b600052602260045260246000fd5b50919050565b6132c680620005df6000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80636b24ffd6116100ee578063a457c2d711610097578063de0e9a3e11610071578063de0e9a3e146103fc578063e819426c1461040f578063ea598cb014610417578063f2e148381461042a57600080fd5b8063a457c2d714610390578063a9059cbb146103a3578063dd62ed3e146103b657600080fd5b80637dc0d1d0116100c85780637dc0d1d01461034857806391da1ed21461036857806395d89b411461038857600080fd5b80636b24ffd6146102ec57806370a08231146102ff57806379cc67901461033557600080fd5b80632ef292901161015b5780633c31175e116101355780633c31175e146102795780634357855e1461028157806345a54ca6146102945780636746e7be146102d957600080fd5b80632ef2929014610242578063313ce56714610257578063395093511461026657600080fd5b806318160ddd1161018c57806318160ddd1461020a57806323b872dd1461021c5780632adb9e3c1461022f57600080fd5b806306fdde03146101b3578063095ea7b3146101d1578063152583de146101f4575b600080fd5b6101bb61044a565b6040516101c891906121a7565b60405180910390f35b6101e46101df3660046121ec565b6104dc565b60405190151581526020016101c8565b6101fc6104f6565b6040516101c892919061233d565b6002545b6040519081526020016101c8565b6101e461022a3660046124a7565b6106a3565b61020e61023d3660046124e8565b6106c7565b61025561025036600461254a565b61086e565b005b604051601281526020016101c8565b6101e46102743660046121ec565b610918565b6101bb610964565b61025561028f366004612600565b610a1f565b600f546102b49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c8565b6102556102e7366004612622565b610b5e565b61020e6102fa3660046121ec565b610bfa565b61020e61030d36600461267a565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6102556103433660046121ec565b610c9f565b600d546102b49073ffffffffffffffffffffffffffffffffffffffff1681565b600e546102b49073ffffffffffffffffffffffffffffffffffffffff1681565b6101bb610cfe565b6101e461039e3660046121ec565b610d0d565b6101e46103b13660046121ec565b610dde565b61020e6103c4366004612697565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b61025561040a3660046124e8565b610dec565b61020e610f73565b6102556104253660046124e8565b611007565b61020e6104383660046124e8565b60116020526000908152604090205481565b606060128054610459906126c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610485906126c5565b80156104d25780601f106104a7576101008083540402835291602001916104d2565b820191906000526020600020905b8154815290600101906020018083116104b557829003601f168201915b5050505050905090565b6000336104ea818585611118565b60019150505b92915050565b610562604051806101400160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6105e860405180610180016040528060608152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815260200160008152602001600067ffffffffffffffff16815260200160001515815260200160001515815260200160608152602001606081526020016060815260200160608152602001606081525090565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663152583de6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610655573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261069b91908101906129c9565b915091509091565b6000336106b18582856112cb565b6106bc8585856113a2565b506001949350505050565b6000806106de600b5430634357855e60e01b611611565b600e546040517ff34d4c630000000000000000000000000000000000000000000000000000000081526004810186905291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063f34d4c6390602401600060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107999190810190612b91565b60408051808201909152600381527f6765740000000000000000000000000000000000000000000000000000000000602082015281519192506107de918491906116a2565b61082c6040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152508260200151846116a29092919063ffffffff16565b600d54600c546108549173ffffffffffffffffffffffffffffffffffffffff169084906116c5565b600081815260106020526040902094909455509192915050565b61087833826117bc565b600f546040517f2ef2929000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632ef29290906108dc908b908b908b908b908b908b908b908b90600401612c81565b600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b505050505050505050505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906104ea908290869061095f908790612d1e565b611118565b600f54604080517f3c31175e000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff1691633c31175e9160048083019260009291908290030181865afa1580156109d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a1a9190810190612d36565b905090565b6000828152600a6020526040902054829073ffffffffffffffffffffffffffffffffffffffff163314610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f662074686560448201527f207265717565737400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000818152600a602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a250600082815260106020818152604080842080548552601183529084209490945593825290925255565b610b6c3382602001356117bc565b600f546040517f6746e7be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690636746e7be90610bc49085908590600401612e85565b600060405180830381600087803b158015610bde57600080fd5b505af1158015610bf2573d6000803e3d6000fd5b505050505050565b600f546040517f6b24ffd600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490526000921690636b24ffd6906044016020604051808303816000875af1158015610c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c98919061300c565b9392505050565b600f546040517f79cc679000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906379cc679090604401610bc4565b606060138054610459906126c5565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610dd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610ad0565b6106bc8286868403611118565b6000336104ea8185856113a2565b33600090815260208190526040902054811115610e65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610ad0565b610e6f33826117bc565b600f546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af1158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a9190613025565b610f70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610ad0565b50565b600f54604080517fe819426c000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163e819426c9160048083019260209291908290030181865afa158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a919061300c565b600f546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190613025565b61110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610ad0565b610f703382611980565b73ffffffffffffffffffffffffffffffffffffffff83166111ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff821661125d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461139c578181101561138f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610ad0565b61139c8484848403611118565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316611445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff82166114e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101561159e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361139c565b61164f6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61168d6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61169981868686611a73565b95945050505050565b60808301516116b19083611b14565b60808301516116c09082611b14565b505050565b6009546000906116d6816001612d1e565b600955835160408086015160808701515191516000937f4042994600000000000000000000000000000000000000000000000000000000936117279386938493923092918a91600191602401613040565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506117b286838684611b2b565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff821661185f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff82166119fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ad0565b8060026000828254611a0f9190612d1e565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b611ab16040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b611ac18560800151610100611d39565b505082845273ffffffffffffffffffffffffffffffffffffffff821660208501527fffffffff0000000000000000000000000000000000000000000000000000000081166040850152835b949350505050565b611b218260038351611d9e565b6116c08282611ead565b6040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003060601b16602082015260348101849052600090605401604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020918201206000818152600a90925291812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a26007546040517f4000aea000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690634000aea090611c6a908890879087906004016130c9565b6020604051808303816000875af1158015611c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cad9190613025565b611b0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c6500000000000000000000000000000000000000000000000000000000006064820152608401610ad0565b604080518082019091526060815260006020820152611d596020836130fe565b15611d8157611d696020836130fe565b611d74906020613139565b611d7e9083612d1e565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611611dc35761139c8360e0600585901b168317611ed4565b60ff8167ffffffffffffffff1611611e0157611dea836018611fe0600586901b1617611ed4565b5061139c8367ffffffffffffffff83166001611ef9565b61ffff8167ffffffffffffffff1611611e4057611e29836019611fe0600586901b1617611ed4565b5061139c8367ffffffffffffffff83166002611ef9565b63ffffffff8167ffffffffffffffff1611611e8157611e6a83601a611fe0600586901b1617611ed4565b5061139c8367ffffffffffffffff83166004611ef9565b611e9683601b611fe0600586901b1617611ed4565b5061139c8367ffffffffffffffff83166008611ef9565b604080518082019091526060815260006020820152610c9883846000015151848551611f1f565b604080518082019091526060815260006020820152610c988384600001515184612027565b604080518082019091526060815260006020820152611b0c848560000151518585612082565b6040805180820190915260608152600060208201528251821115611f4257600080fd5b6020850151611f518386612d1e565b1115611f8457611f8485611f7487602001518786611f6f9190612d1e565b612103565b611f7f906002613150565b61211a565b600080865180518760208301019350808887011115611fa35787860182525b505050602084015b60208410611fe35780518252611fc2602083612d1e565b9150611fcf602082612d1e565b9050611fdc602085613139565b9350611fab565b5181517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60208690036101000a019081169019919091161790525083949350505050565b6040805180820190915260608152600060208201528360200151831061205c5761205c8485602001516002611f7f9190613150565b8351805160208583010184815350808503612078576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516120a68584612d1e565b11156120ba576120ba85611f748685612d1e565b600060016120ca846101006132ad565b6120d49190613139565b90508551838682010185831982511617815250805184870111156120f85783860181525b509495945050505050565b6000818311156121145750816104f0565b50919050565b81516121268383611d39565b5061139c8382611ead565b60005b8381101561214c578181015183820152602001612134565b8381111561139c5750506000910152565b60008151808452612175816020860160208601612131565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610c98602083018461215d565b73ffffffffffffffffffffffffffffffffffffffff81168114610f7057600080fd5b80356121e7816121ba565b919050565b600080604083850312156121ff57600080fd5b823561220a816121ba565b946020939093013593505050565b6000610180825181855261222e8286018261215d565b915050602083015161224c602086018267ffffffffffffffff169052565b506040830151612268604086018267ffffffffffffffff169052565b5060608301516060850152608083015161228e608086018267ffffffffffffffff169052565b5060a08301516122a260a086018215159052565b5060c08301516122b660c086018215159052565b5060e083015184820360e08601526122ce828261215d565b91505061010080840151858303828701526122e9838261215d565b925050506101208084015185830382870152612305838261215d565b925050506101408084015185830382870152612321838261215d565b9250505061016080840151858303828701526117b2838261215d565b604081526000835161014080604085015261235c61018085018361215d565b915060208601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080868503016060870152612398848361215d565b935060408801519150808685030160808701526123b5848361215d565b935060608801519150808685030160a08701526123d2848361215d565b935060808801519150808685030160c08701526123ef848361215d565b935060a08801519150808685030160e087015261240c848361215d565b935060c0880151915061010081878603018188015261242b858461215d565b945060e0890151925061012082888703018189015261244a868561215d565b9550818a01519350828887030185890152612465868561215d565b9550808a015194505050505061249461016085018273ffffffffffffffffffffffffffffffffffffffff169052565b5082810360208401526116998185612218565b6000806000606084860312156124bc57600080fd5b83356124c7816121ba565b925060208401356124d7816121ba565b929592945050506040919091013590565b6000602082840312156124fa57600080fd5b5035919050565b60008083601f84011261251357600080fd5b50813567ffffffffffffffff81111561252b57600080fd5b60208301915083602082850101111561254357600080fd5b9250929050565b60008060008060008060008060a0898b03121561256657600080fd5b883567ffffffffffffffff8082111561257e57600080fd5b61258a8c838d01612501565b909a50985060208b0135915061259f826121ba565b90965060408a013590808211156125b557600080fd5b6125c18c838d01612501565b909750955060608b01359150808211156125da57600080fd5b506125e78b828c01612501565b999c989b50969995989497949560800135949350505050565b6000806040838503121561261357600080fd5b50508035926020909101359150565b6000806040838503121561263557600080fd5b8235612640816121ba565b9150602083013567ffffffffffffffff81111561265c57600080fd5b8301610140818603121561266f57600080fd5b809150509250929050565b60006020828403121561268c57600080fd5b8135610c98816121ba565b600080604083850312156126aa57600080fd5b82356126b5816121ba565b9150602083013561266f816121ba565b600181811c908216806126d957607f821691505b602082108103612114577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561276557612765612712565b60405290565b604051610140810167ffffffffffffffff8111828210171561276557612765612712565b600082601f8301126127a057600080fd5b815167ffffffffffffffff808211156127bb576127bb612712565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561280157612801612712565b8160405283815286602085880101111561281a57600080fd5b6117b2846020830160208901612131565b80516121e7816121ba565b805167ffffffffffffffff811681146121e757600080fd5b805180151581146121e757600080fd5b6000610180828403121561287157600080fd5b612879612741565b9050815167ffffffffffffffff8082111561289357600080fd5b61289f8583860161278f565b83526128ad60208501612836565b60208401526128be60408501612836565b6040840152606084015160608401526128d960808501612836565b60808401526128ea60a0850161284e565b60a08401526128fb60c0850161284e565b60c084015260e084015191508082111561291457600080fd5b6129208583860161278f565b60e08401526101009150818401518181111561293b57600080fd5b6129478682870161278f565b83850152506101209150818401518181111561296257600080fd5b61296e8682870161278f565b83850152506101409150818401518181111561298957600080fd5b6129958682870161278f565b8385015250610160915081840151818111156129b057600080fd5b6129bc8682870161278f565b8385015250505092915050565b600080604083850312156129dc57600080fd5b825167ffffffffffffffff808211156129f457600080fd5b908401906101408287031215612a0957600080fd5b612a1161276b565b825182811115612a2057600080fd5b612a2c8882860161278f565b825250602083015182811115612a4157600080fd5b612a4d8882860161278f565b602083015250604083015182811115612a6557600080fd5b612a718882860161278f565b604083015250606083015182811115612a8957600080fd5b612a958882860161278f565b606083015250608083015182811115612aad57600080fd5b612ab98882860161278f565b60808301525060a083015182811115612ad157600080fd5b612add8882860161278f565b60a08301525060c083015182811115612af557600080fd5b612b018882860161278f565b60c08301525060e083015182811115612b1957600080fd5b612b258882860161278f565b60e0830152506101008084015183811115612b3f57600080fd5b612b4b8982870161278f565b828401525050610120612b5f81850161282b565b908201526020860151909450915080821115612b7a57600080fd5b50612b878582860161285e565b9150509250929050565b600060208284031215612ba357600080fd5b815167ffffffffffffffff80821115612bbb57600080fd5b9083019060408286031215612bcf57600080fd5b604051604081018181108382111715612bea57612bea612712565b604052825182811115612bfc57600080fd5b612c088782860161278f565b825250602083015182811115612c1d57600080fd5b612c298782860161278f565b60208301525095945050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60a081526000612c9560a083018a8c612c38565b73ffffffffffffffffffffffffffffffffffffffff891660208401528281036040840152612cc481888a612c38565b90508281036060840152612cd9818688612c38565b9150508260808301529998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612d3157612d31612cef565b500190565b600060208284031215612d4857600080fd5b815167ffffffffffffffff811115612d5f57600080fd5b611b0c8482850161278f565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612da057600080fd5b830160208101925035905067ffffffffffffffff811115612dc057600080fd5b8060051b360382131561254357600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612e0457600080fd5b8260051b8083602087013760009401602001938452509192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e5657600080fd5b830160208101925035905067ffffffffffffffff811115612e7657600080fd5b80360382131561254357600080fd5b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000612eb18384612d6b565b610140806040860152612ec961018086018385612dd2565b925060208601356060860152612ee26040870187612e21565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080878603016080880152612f1a858584612c38565b9450612f28606089016121dc565b73ffffffffffffffffffffffffffffffffffffffff811660a08901529350612f536080890189612e21565b94509150808786030160c0880152612f6c858584612c38565b9450612f7b60a0890189612e21565b94509150808786030160e0880152612f94858584612c38565b9450612fa360c0890189612e21565b94509150610100818887030181890152612fbe868685612c38565b9550612fcd60e08a018a612e21565b955092506101208289880301818a0152612fe8878786612c38565b918a0135948901949094529290970135610160909601959095529695505050505050565b60006020828403121561301e57600080fd5b5051919050565b60006020828403121561303757600080fd5b610c988261284e565b600061010073ffffffffffffffffffffffffffffffffffffffff808c1684528a60208501528960408501528089166060850152507fffffffff00000000000000000000000000000000000000000000000000000000871660808401528560a08401528460c08401528060e08401526130ba8184018561215d565b9b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000611699606083018461215d565b600082613134577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b60008282101561314b5761314b612cef565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561318857613188612cef565b500290565b600181815b808511156131e657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156131cc576131cc612cef565b808516156131d957918102915b93841c9390800290613192565b509250929050565b6000826131fd575060016104f0565b8161320a575060006104f0565b8160018114613220576002811461322a57613246565b60019150506104f0565b60ff84111561323b5761323b612cef565b50506001821b6104f0565b5060208310610133831016604e8410600b8410161715613269575081810a6104f0565b613273838361318d565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156132a5576132a5612cef565b029392505050565b6000610c9883836131ee56fea164736f6c634300080e000aa164736f6c634300080e000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2183,
        "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3599,
        "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
        "label": "wrappedTCO2Contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3603,
        "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
        "label": "underlyingToWrapped",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3605,
        "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
        "label": "jobId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 3607,
        "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
        "label": "fee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3609,
        "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
        "label": "oracle",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3611,
        "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
        "label": "link",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3615,
        "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
        "label": "requests",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(RequestDetails)3007_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RequestDetails)3007_storage)dyn_storage": {
        "base": "t_struct(RequestDetails)3007_storage",
        "encoding": "dynamic_array",
        "label": "struct IOracleUrlSource.RequestDetails[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RequestDetails)3007_storage": {
        "encoding": "inplace",
        "label": "struct IOracleUrlSource.RequestDetails",
        "members": [
          {
            "astId": 3004,
            "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
            "label": "url",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3006,
            "contract": "contracts/WrappedTCO2Factory.sol:WrappedTCO2Factory",
            "label": "path",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}